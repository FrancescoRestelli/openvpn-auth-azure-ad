#!/usr/bin/env python3

import argparse
import os
import yaml
import sys
import msal

from authenticator import AADAuthenticator, AADAuthenticatorFlows


class LoadFromFile(argparse.Action):
    def __call__(self, _parser, namespace, values, option_string=None):
        with values as file:
            _parser.parse_args(yaml.load(file), namespace)


parser = argparse.ArgumentParser(description='Authenticate against Azure AD.')
parser.add_argument('--host', help='Host of OpenVPN management interface.')
parser.add_argument('--port', help='Port of OpenVPN management interface.')
parser.add_argument('--socket', help='Path of socket or OpenVPN management interface.')
parser.add_argument('--password', help='Passwort for OpenVPN management interface.')
parser.add_argument('--authenticators', help='Enable authenticators.',
                    nargs='+', type=list,
                    default=os.environ.get('authenticators',
                                           default='%s,%s' % (
                                               AADAuthenticatorFlows.USER_PASSWORD,
                                               AADAuthenticatorFlows.DEVICE_TOKEN
                                           )).split(','),
                    choices=(AADAuthenticatorFlows.USER_PASSWORD, AADAuthenticatorFlows.DEVICE_TOKEN))

parser.add_argument('--token-authority',
                    default=os.environ.get('authority', default='https://login.microsoftonline.com/organizations'),
                    help='A URL that identifies a token authority. It should be of the format '
                         'https://login.microsoftonline.com/your_tenant By default, we will use '
                         'https://login.microsoftonline.com/organizations')

parser.add_argument('--graph-endpoint', dest='graph_endpoint',
                    default=os.environ.get('graph_endpoint', default="https://graph.microsoft.com/v1.0/"),
                    help='Endpoint of the graph url. See: '
                         'https://developer.microsoft.com/en-us/graph/graph-explorer')

parser.add_argument('--client-id', required=True, dest='client_id', default=os.environ.get('client_id'),
                    help='Client ID of application.')

parser.add_argument('--config', type=open, action=LoadFromFile)

args = parser.parse_args()

if args.host is None and args.port is None and args.socket is None:
    parser.print_usage()
    sys.exit(1)

app = msal.PublicClientApplication(args.client_id, authority=args.token_authority)
authenticator = AADAuthenticator(app, args.graph_endpoint, args.authenticators,
                                 args.host, args.port, args.socket, args.password)

authenticator.run()
